### Strategy B: Modular Monorepo (Next.js + NestJS services + Kafka + Postgres)

- Goal(s): Balance speed with modularity and scale.

### Assumptions
- Nx/Turborepo; shared types; feature-owned services.

### Alternatives
- Lean monolith (A), Serverless-first (C). Chosen for modular scale.

### Risks & Mitigations
- Build graph complexity (M×M): Cache/remote cache + clear boundaries.
- Event complexity (M×M): Contract tests; schema registry.
- Infra overhead (M×M): Platform templates; golden paths.

### Dependencies
- Monorepo tooling, message broker, schema registry, container platform.

### Architecture Summary
- Next.js UI, NestJS microservices, Kafka, Postgres, API gateway.

### Trigger → Rule → File(s)/Output mapping

| Trigger | Rules | Files/Outputs | Gates |
|---|---|---|---|
| architecture | `F4-architecture`, `6-complex-feature-context-preservation` | `domain-architecture.md` | ADRs, versioning |
| planning | `F2-planning` | `milestones.md` | Work breakdown quality |
| security | `F8-security` | `security-plan.md` | RBAC, audit trails |
| testing | `F7-qa` | `testing-strategy.md` | Contract/e2e matrix |

### Success Metrics
- Independent deploys for ≥2 services; error budget adherence.

### Next Steps
- POC one service boundary + event flow; evaluate complexity.
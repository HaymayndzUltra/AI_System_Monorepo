Filename: docs/proposals/01-capability-router.md
### Title
Capability-Based Trigger Router (CBTR)

### Goals
- Align triggers to actionable capabilities across any project type (web, mobile, backend/API, data/ML, CLI/desktop, infra).
- Minimize ambiguity; each user intent maps deterministically to 1..N capabilities and rule bundles.
- Enable progressive enhancement and security overlays by capability gates.

### Assumptions
- Existing rules are stable and tagged with TAGS/TRIGGERS/SCOPE.
- We can introduce a thin router in front of the current trigger system.

### New Taxonomy (Capabilities)
- code.edit
- code.quality
- code.modify.safety
- docs.sync
- context.load
- ui.foundation
- ui.interaction
- ui.premium
- workflow.bootstrap
- workflow.plan
- workflow.taskgen
- workflow.execute
- workflow.retro
- workflow.parallel
- security.overlay
- security.audit
- audit.run
- validation.run
- test.unit
- test.integration
- test.e2e
- release.prepare
- release.deploy
- observe.metrics
- observe.traces
- observe.logs
- data.pipeline
- ml.train
- infra.iac

### Router Logic (Pseudocode)
```pseudo
capabilities = classify(user_message)

rules = []
for cap in capabilities:
  rules += capability_to_rules(cap)

rules = apply_overlays(rules, include=[F8_security_overlay], context=repo_state)

execute(rules)
```

### Backward-Compat Mapping (Old → New → Rules)
| Old Trigger(s) | New Capability Trigger(s) | Applied Rules |
|---|---|---|
| rule, context, analyze | context.load | 1-master-rule-context-discovery |
| security, compliance, governance, threat, audit | security.overlay, security.audit | F8-security-and-compliance-overlay, security-compliance-overlay |
| conflict, clarify, proceed, how to, question | collab.resolve (alias of context.load + AI Collaboration) | 2-master-rule-ai-collaboration-guidelines |
| code, develop, refactor, implement, fix, quality | code.quality | 3-master-rule-code-quality-checklist |
| modify, edit, change, update, refactor, fix, implement | code.modify.safety | 4-master-rule-code-modification-safety-protocol |
| readme, documentation, refactoring, structure, docs | docs.sync | 5-master-rule-documentation-and-context-guidelines |
| complex, feature, algorithm, state-machine, api-integration, ... | context.load + code.modify.safety | 6-master-rule-complex-feature-context-preservation |
| foundation, design tokens, AA, grid, spacing, typography | ui.foundation | common-rule-ui-foundation-design-system |
| interaction, accessibility, aria, animation, LCP/INP/CLS | ui.interaction | common-rule-ui-interaction-a11y-perf |
| premium, brand, dataviz, enterprise, RBAC | ui.premium | common-rule-ui-premium-brand-dataviz-enterprise-gated |
| bootstrap, setup, initialize, project start | workflow.bootstrap | dev-workflow router (7-dev-workflow-command-router) |
| master plan, framework ecosystem, parallel development | workflow.plan, workflow.parallel | dev-workflow router |
| prd, requirements, product spec | workflow.plan | dev-workflow router |
| task generation, implementation plan | workflow.taskgen | dev-workflow router |
| execute, implement, process tasks | workflow.execute | dev-workflow router |
| retrospective, review, improvement | workflow.retro | dev-workflow router |
| audit {framework} @ {commit|HEAD} | audit.run | 8-auditor-validator-protocol |
| validate {framework} using {audit_report} | validation.run | 8-auditor-validator-protocol |

### Trigger ↔ Rule(s) ↔ Files/Outputs
| Capability | Rule(s) | Files/Outputs |
|---|---|---|
| context.load | 1-master-rule-context-discovery | Loaded READMEs; selected rules |
| security.overlay | F8-security-and-compliance-overlay | [SECURITY CHECK] logs; risk notes |
| code.modify.safety | 4-master-rule-code-modification-safety-protocol | Change plan; validation checklist |
| docs.sync | 5-master-rule-documentation-and-context-guidelines | Updated docs/* or plan to update |
| workflow.* | 7-dev-workflow-command-router | /.cursor/dev-workflow/*.md protocol paths |
| audit.run | 8-auditor-validator-protocol | reports/audit-{framework}-{ts}.md |
| validation.run | 8-auditor-validator-protocol | reports/validation-{framework}-{ts}.md |
| ui.* | common-rule-ui-* | tokens.json, component specs |
| test.* | Testing framework rules (future) | junit.xml, coverage reports |
| release.* | Release gate rules (future) | release notes, changelog |

### Example User Messages → Capabilities → Rules
- "Refactor this API handler safely":
  - code.modify.safety + code.quality + security.overlay → 4,3,F8
- "Generate PRD and tasks":
  - workflow.plan + workflow.taskgen → dev-workflow router
- "Run audit for backend at HEAD":
  - audit.run + security.overlay → 8,F8

### Migration Plan
- Phase 0: Introduce capability taxonomy (no-op mapping).
- Phase 1: Dual route: old triggers + new capabilities; log parity.
- Phase 2: Default to capabilities; old triggers as aliases with deprecation notices.
- Phase 3: Remove old triggers after 2 release cycles.

### Risks
- Misclassification of capabilities; mitigate via explicit user confirmation on low-confidence.
- Over-application of security overlays; mitigate with policy scoping.

### Dependencies
- Lightweight classifier (regex + keywords) with optional ML later.
- Capability-to-rule registry (YAML/JSON).

### Alternatives
- Maintain current trigger list; add only aliases (low change, less clarity).
- Pure ML intent routing (higher maintenance and opacity).

### Success Metrics
- ≥95% correct routing vs human baseline.
- <2% false-negative on security overlay triggers.
- Time-to-action reduced by ≥20% for multi-domain requests.

### Next Steps
- Draft capability registry schema.
- Implement dual routing with parity logs.
- Add per-capability tests and golden cases.
Filename: docs/proposals/02-domain-lifecycle-router.md
### Title
Domain × Lifecycle Matrix Router (DLxLR)

### Goals
- Route by domain (frontend, backend, mobile, data-ml, infra-iac, documentation, dev-workflow) and lifecycle stage (discover, plan, implement, test, audit, release, observe).
- Enable predictable, multi-slice orchestration across stacks.

### Assumptions
- Dev-workflow protocols are authoritative for lifecycle orchestration.

### Domains × Lifecycle (Matrix)
| Domain \\ Lifecycle | discover | plan | implement | test | audit | release | observe |
|---|---|---|---|---|---|---|---|
| frontend | context.load | workflow.plan | code.modify.safety + ui.* | test.e2e | security.overlay | release.prepare | observe.metrics |
| backend | context.load | workflow.plan | code.modify.safety | test.integration | audit.run | release.prepare | observe.logs |
| mobile | context.load | workflow.plan | code.modify.safety | test.e2e | security.overlay | release.deploy | observe.metrics |
| data-ml | context.load | workflow.plan | data.pipeline + ml.train | test.integration | audit.run | release.prepare | observe.traces |
| infra-iac | context.load | workflow.plan | infra.iac | test.integration | security.audit | release.deploy | observe.metrics |
| documentation | context.load | workflow.plan | docs.sync | test.unit | audit.run | release.prepare | observe.logs |
| dev-workflow | context.load | workflow.plan | workflow.execute | test.unit | audit.run | release.prepare | observe.metrics |

### Router Logic (Pseudocode)
```pseudo
domain = detect_domain(user_message, file_context)
lifecycle = detect_lifecycle(user_message)

capabilities = matrix(domain, lifecycle)
rules = resolve_rules(capabilities)
execute(rules)
```

### Backward-Compat (Old → New)
| Old Trigger | New Domain × Lifecycle |
|---|---|
| bootstrap, setup, initialize | dev-workflow × discover/plan |
| prd, requirements | any domain × plan |
| execute, implement | domain × implement |
| retrospective, review | dev-workflow × release/observe |
| UI foundation keywords | frontend × implement (ui.foundation) |
| security, audit | any domain × audit (security.overlay or audit.run) |

### Trigger ↔ Rule(s) ↔ Files/Outputs
| Domain × Lifecycle | Rule(s) | Files/Outputs |
|---|---|---|
| frontend × implement | 4,3,common UI rules,F8 | components/*; tokens; checklist |
| backend × audit | 8,F8 | reports/audit-backend-*.md |
| infra × release | F8 + release gates | manifests, changelog |

### Examples
- "Add dark mode tokens to settings" → frontend × implement → ui.foundation + code.modify.safety
- "Run canary for service A" → backend × release → release gates + observe.metrics

### Migration Plan
- Introduce detection heuristics for domain/lifecycle.
- Shadow route with current triggers; compare results.
- Switch default after stability SLO is met.

### Risks
- Ambiguity for multi-domain requests; resolve via split-routing.
- Lifecycle mis-detection; request a single clarification on low confidence.

### Dependencies
- Domain heuristics (path, tech keywords).
- Lifecycle keyword map aligned to dev-workflow docs.

### Success Metrics
- Routing agreement with SMEs ≥ 95%.
- Reduced cross-domain back-and-forth by 25%.

### Next Steps
- Implement detection library.
- Add matrix registry and tests.
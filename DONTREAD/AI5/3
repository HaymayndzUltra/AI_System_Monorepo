Filename: docs/proposals/04-governance-rule-lifecycle.md
### Title
Governance, Rule Registry, and Lifecycle Management

### Goals
- Treat rules as versioned, testable, governed assets.
- Enable deprecation, rollout, and observability of rule effectiveness.

### Assumptions
- Rules have frontmatter with metadata (TAGS/TRIGGERS/SCOPE).

### Rule Registry (Fields)
- name, version, status {active, preview, deprecated}, scope, tags, triggers, owner, lastReviewedAt, testCoverage, docsRef

### Lifecycle
- Propose → Review → Preview (behind flag) → Active → Deprecated → Removed

### Rollout Controls
- Flags: rule.enable.{name}, audience, repo/project constraints
- Metrics: hit rate, override rate, error rate, time-to-route

### Backward-Compat
- Old triggers retained; registry provides alias links to new capability keys.

### Trigger ↔ Rule(s) ↔ Files/Outputs
| Action | Files/Outputs |
|---|---|---|
| Add/Update rule | rules/registry.yaml; CHANGELOG.md |
| Deprecate rule | registry status=deprecated; notice in README |
| Rollout report | reports/rules-rollout-{ts}.md |

### Risks
- Governance overhead; mitigate with automation.
- Stale metadata; enforce review cadence.

### Dependencies
- Registry file; validator linter CI.
- Owner map.

### Success Metrics
- 100% rules with owners and review dates.
- <1% routing errors after deprecations.

### Next Steps
- Create registry schema and CI checks.
- Migrate existing rules into registry with versions.
